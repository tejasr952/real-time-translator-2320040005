# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CK9srSozgJuufLVfijUbNcuL4YcIDUco
"""

def DFS(graph, start, dest):
    stack = []
    visited = []

    # Start with the initial node
    stack.append(start)
    visited.append(start)
    print('Visited', start)

    # Initialize the result as 'Not reachable'
    result = ["Not reachable", []]

    while stack:
        node = stack.pop()

        # If the destination is found, mark it as reachable
        if node == dest:
            print('Destination node found:', node)
            result[0] = 'Reachable'
            break

        print(node, 'is not the destination node.')

        # Check if the node exists in the graph to prevent KeyError
        if node in graph:
            for child in graph[node]:
                if child not in visited:
                    visited.append(child)
                    stack.append(child)
                    print('Visited', child)  # Displaying the child being visited
                    # If the child is the destination, mark it as reachable
                    if child == dest:
                        print('Destination node found:', child)
                        result[0] = 'Reachable'
                        result[1] = visited
                        return result

    # Final result if the destination is not found
    result[1] = visited
    return result


# Example graph definition
graph = {
    'A': ['B', 'C', 'D'],
    'B': ['E', 'F', 'G'],
    'C': ['H'],
    'D': ['I', 'J', 'K'],
    'E': ['L'],
    'F': ['M'],
    'G': ['N'],
    'H': ['O', 'P'],
    'I': ['Q', 'R'],
    'J': ['S'],
    'K': ['T']
}

# Running DFS with start as 'A' and goal as 'P'
result = DFS(graph, "A", "P")
print(result[0])
print("Visited nodes:", result[1])

def BFS(graph,start,dest) -> list():
    queue = list()
    visited = list()
    queue.append(start)
    print('Visited',start)
    result = ["Not reachable",list()]
    while queue:
        node = queue.pop(0)
        visited.append(node)
        if node==dest:
            print('Destination node found',node)
            result[0] = 'Reachable'
            break
        print(node,'Is not a destination node')
        for child in graph[node]:
            if child not in visited:
                queue.append(child)
    result[1] = visited
    return result


graph = {'A': ['B', 'C','D'],
    'B': ['E', 'F', 'G'],
    'C': ['H'],
    'D': ['I','J','K'],
  'E': ['L'],
'F':['M'],
'G':['N'],
'H':['O','P'],
'I': ['Q','R'],
     'J':['S'],
      'K':['T']

}

print(result[0])
print("Path used to traverse :-" , result[1])

Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 8)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1),('H', 7)] ,
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],

}

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None

def h(n):
        H_dist = {
            'A': 10,
            'B': 8,
            'C': 5,
            'D': 7,
            'E': 3,
            'F': 6,
            'G': 5,
            'H': 3,
            'I': 1,
            'J': 0
        }
        return H_dist[n]

def aStarAlgo(start_node, stop_node):

        open_set = set(start_node)
        closed_set = set()
        g = {}
        parents = {}
        g[start_node] = 0
        parents[start_node] = start_node

        while len(open_set) > 0:
            n = None

            for v in open_set:
                if n == None or g[v] + h(v) < g[n] + h(n):
                    n = v

            if n == stop_node or Graph_nodes[n] == None:
                pass
            else:
                for (m, weight) in get_neighbors(n):
                    if m not in open_set and m not in closed_set:
                        open_set.add(m)
                        parents[m] = n
                        g[m] = g[n] + weight

                    else:
                        if g[m] > g[n] + weight:
                            g[m] = g[n] + weight
                            parents[m] = n
                            if m in closed_set:
                                closed_set.remove(m)
                                open_set.add(m)

            if n == None:
                print('Path does not exist!')
                return None
            if n == stop_node:
                path = []

                while parents[n] != n:
                    path.append(n)
                    n = parents[n]

                path.append(start_node)

                path.reverse()

                print('Path found: {}'.format(path))
                return path
            open_set.remove(n)
            closed_set.add(n)

        print('Path does not exist!')
        return None

aStarAlgo('A', 'J')

graph={
    '1':['2','3','7'],
    '2':['4'],
    '3':['5'],
    '4':['6'],
    '5':[],
    '6':[],
    '7':[],
}

def bfs(graph,source):
    q=[]
    q.append(source)
    while q:
        current=q.pop(0)
        print(current)
        for node in graph[current]:
            q.append(node)

bfs(graph,'1')